// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: services.proto
// </auto-generated>
// Original file comments:
// Options:
// Date: 2023-03-27 18:17:48
// Version: 6.70
// Tip: To override a DTO option, remove "//" prefix before updating
// BaseUrl: https://localhost:5001
//
// //GlobalNamespace: 
// //AddDescriptionAsComments: True
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Contracts {
  public static partial class GrpcServices
  {
    static readonly string __ServiceName = "GrpcServices";

    static readonly grpc::Marshaller<global::Contracts.Hello> __Marshaller_Hello = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Contracts.Hello.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Contracts.HelloResponse> __Marshaller_HelloResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Contracts.HelloResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Contracts.StreamFiles> __Marshaller_StreamFiles = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Contracts.StreamFiles.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Contracts.FileContent> __Marshaller_FileContent = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Contracts.FileContent.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Contracts.StreamServerEvents> __Marshaller_StreamServerEvents = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Contracts.StreamServerEvents.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Contracts.StreamServerEventsResponse> __Marshaller_StreamServerEventsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Contracts.StreamServerEventsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Contracts.Hello, global::Contracts.HelloResponse> __Method_GetHello = new grpc::Method<global::Contracts.Hello, global::Contracts.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHello",
        __Marshaller_Hello,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::Contracts.Hello, global::Contracts.HelloResponse> __Method_PostHello = new grpc::Method<global::Contracts.Hello, global::Contracts.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostHello",
        __Marshaller_Hello,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::Contracts.Hello, global::Contracts.HelloResponse> __Method_PutHello = new grpc::Method<global::Contracts.Hello, global::Contracts.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutHello",
        __Marshaller_Hello,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::Contracts.Hello, global::Contracts.HelloResponse> __Method_DeleteHello = new grpc::Method<global::Contracts.Hello, global::Contracts.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteHello",
        __Marshaller_Hello,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::Contracts.StreamFiles, global::Contracts.FileContent> __Method_ServerStreamFiles = new grpc::Method<global::Contracts.StreamFiles, global::Contracts.FileContent>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ServerStreamFiles",
        __Marshaller_StreamFiles,
        __Marshaller_FileContent);

    static readonly grpc::Method<global::Contracts.StreamServerEvents, global::Contracts.StreamServerEventsResponse> __Method_ServerStreamServerEvents = new grpc::Method<global::Contracts.StreamServerEvents, global::Contracts.StreamServerEventsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ServerStreamServerEvents",
        __Marshaller_StreamServerEvents,
        __Marshaller_StreamServerEventsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Contracts.ServicesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GrpcServices</summary>
    [grpc::BindServiceMethod(typeof(GrpcServices), "BindService")]
    public abstract partial class GrpcServicesBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Contracts.HelloResponse> GetHello(global::Contracts.Hello request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Contracts.HelloResponse> PostHello(global::Contracts.Hello request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Contracts.HelloResponse> PutHello(global::Contracts.Hello request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Contracts.HelloResponse> DeleteHello(global::Contracts.Hello request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ServerStreamFiles(global::Contracts.StreamFiles request, grpc::IServerStreamWriter<global::Contracts.FileContent> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ServerStreamServerEvents(global::Contracts.StreamServerEvents request, grpc::IServerStreamWriter<global::Contracts.StreamServerEventsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GrpcServices</summary>
    public partial class GrpcServicesClient : grpc::ClientBase<GrpcServicesClient>
    {
      /// <summary>Creates a new client for GrpcServices</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GrpcServicesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GrpcServices that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GrpcServicesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GrpcServicesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GrpcServicesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Contracts.HelloResponse GetHello(global::Contracts.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Contracts.HelloResponse GetHello(global::Contracts.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Contracts.HelloResponse> GetHelloAsync(global::Contracts.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Contracts.HelloResponse> GetHelloAsync(global::Contracts.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHello, null, options, request);
      }
      public virtual global::Contracts.HelloResponse PostHello(global::Contracts.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Contracts.HelloResponse PostHello(global::Contracts.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Contracts.HelloResponse> PostHelloAsync(global::Contracts.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Contracts.HelloResponse> PostHelloAsync(global::Contracts.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostHello, null, options, request);
      }
      public virtual global::Contracts.HelloResponse PutHello(global::Contracts.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Contracts.HelloResponse PutHello(global::Contracts.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Contracts.HelloResponse> PutHelloAsync(global::Contracts.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Contracts.HelloResponse> PutHelloAsync(global::Contracts.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutHello, null, options, request);
      }
      public virtual global::Contracts.HelloResponse DeleteHello(global::Contracts.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Contracts.HelloResponse DeleteHello(global::Contracts.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Contracts.HelloResponse> DeleteHelloAsync(global::Contracts.Hello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Contracts.HelloResponse> DeleteHelloAsync(global::Contracts.Hello request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteHello, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Contracts.FileContent> ServerStreamFiles(global::Contracts.StreamFiles request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerStreamFiles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Contracts.FileContent> ServerStreamFiles(global::Contracts.StreamFiles request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ServerStreamFiles, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Contracts.StreamServerEventsResponse> ServerStreamServerEvents(global::Contracts.StreamServerEvents request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerStreamServerEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Contracts.StreamServerEventsResponse> ServerStreamServerEvents(global::Contracts.StreamServerEvents request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ServerStreamServerEvents, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GrpcServicesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GrpcServicesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GrpcServicesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetHello, serviceImpl.GetHello)
          .AddMethod(__Method_PostHello, serviceImpl.PostHello)
          .AddMethod(__Method_PutHello, serviceImpl.PutHello)
          .AddMethod(__Method_DeleteHello, serviceImpl.DeleteHello)
          .AddMethod(__Method_ServerStreamFiles, serviceImpl.ServerStreamFiles)
          .AddMethod(__Method_ServerStreamServerEvents, serviceImpl.ServerStreamServerEvents).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GrpcServicesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Contracts.Hello, global::Contracts.HelloResponse>(serviceImpl.GetHello));
      serviceBinder.AddMethod(__Method_PostHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Contracts.Hello, global::Contracts.HelloResponse>(serviceImpl.PostHello));
      serviceBinder.AddMethod(__Method_PutHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Contracts.Hello, global::Contracts.HelloResponse>(serviceImpl.PutHello));
      serviceBinder.AddMethod(__Method_DeleteHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Contracts.Hello, global::Contracts.HelloResponse>(serviceImpl.DeleteHello));
      serviceBinder.AddMethod(__Method_ServerStreamFiles, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Contracts.StreamFiles, global::Contracts.FileContent>(serviceImpl.ServerStreamFiles));
      serviceBinder.AddMethod(__Method_ServerStreamServerEvents, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Contracts.StreamServerEvents, global::Contracts.StreamServerEventsResponse>(serviceImpl.ServerStreamServerEvents));
    }

  }
}
#endregion
